import os
import requests

# Cargar variables de entorno
REDMINE_URL = os.getenv("REDMINE_URL")
REDMINE_API_KEY = os.getenv("REDMINE_API_KEY")

# Validar que las variables est√©n definidas
if not REDMINE_URL or not REDMINE_API_KEY:
    print("‚ùå Error: REDMINE_URL o REDMINE_API_KEY no est√°n definidos.")
    exit(1)

# üîß Definir ID del proyecto y nombre de la p√°gina wiki
project_id = "ps211lh010_001"
wiki_page = "Referencias_academicas"
url_wiki = f"{REDMINE_URL}/projects/{project_id}/wiki/{wiki_page}.json"

# Encabezados para autenticaci√≥n
headers = {
    "X-Redmine-API-Key": REDMINE_API_KEY,
    "Content-Type": "application/json"
}

# Verificar si la p√°gina existe
response = requests.get(url_wiki, headers=headers)

if response.status_code == 200:
    print("‚úÖ P√°gina wiki encontrada. Procediendo a actualizar...")

    # Contenido nuevo en formato Markdown
    nuevo_contenido = """
## Referencias Acad√©micas

- P√©rez, J. (2023). *Gesti√≥n ambiental en zonas urbanas*. Editorial Ciencia Verde.
- Rodr√≠guez, M. & Torres, L. (2022). *Indicadores de sostenibilidad*. Revista Medioambiente, 15(2), 45‚Äì60.
- CITMA (2021). *Informe t√©cnico sobre biodiversidad en Cuba*. Ministerio de Ciencia, Tecnolog√≠a y Medio Ambiente.
"""

    # Datos para actualizar la p√°gina
    payload = {
        "wiki_page": {
            "text": nuevo_contenido,
            "comments": "Actualizaci√≥n autom√°tica semanal de referencias acad√©micas"
        }
    }

    # Enviar actualizaci√≥n
    put_response = requests.put(url_wiki, headers=headers, json=payload)

    if put_response.status_code == 200:
        print("‚úÖ P√°gina wiki actualizada correctamente.")
    else:
        print(f"‚ö†Ô∏è Error al actualizar la p√°gina wiki. C√≥digo: {put_response.status_code}")
        print(put_response.text)

else:
    print(f"‚ö†Ô∏è No se pudo acceder a la p√°gina wiki. C√≥digo de estado: {response.status_code}")
    print(response.text)

